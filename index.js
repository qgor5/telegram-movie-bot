require('dotenv').config();
const axios = require('axios');
const TelegramBot = require('node-telegram-bot-api');
const schedule = require('node-schedule');
const { generateSeoText } = require('./seoTextGenerator');

const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const CHANNEL_USERNAME = process.env.CHANNEL_USERNAME;
const TMDB_API_KEY = process.env.TMDB_API_KEY;
const PUBLISH_COUNT = parseInt(process.env.PUBLISH_COUNT) || 2;
const PUBLISH_HOURS = process.env.PUBLISH_HOURS ? process.env.PUBLISH_HOURS.split(',').map(Number) : [12, 20];
const LANGUAGE = process.env.LANGUAGE || 'ru';
const REGION = process.env.REGION || 'UA';

const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: false });

const TMDB_BASE_URL = 'https://api.themoviedb.org/3';
const TMDB_IMAGE_BASE = 'https://image.tmdb.org/t/p/w500';

let publishedIds = new Set(); // –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–æ–≤

async function fetchMovies(type = 'movie', page = 1) {
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã/—Å–µ—Ä–∏–∞–ª—ã/–º—É–ª—å—Ç—Ñ–∏–ª—å–º—ã —Å TMDb
  try {
    const url = `${TMDB_BASE_URL}/${type}/popular`;
    const res = await axios.get(url, {
      params: {
        api_key: TMDB_API_KEY,
        language: LANGUAGE,
        page,
        region: REGION
      }
    });
    return res.data.results;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–æ–≤:', error.message);
    return [];
  }
}

async function fetchVideos(type, id) {
  // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–π–ª–µ—Ä—ã —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞
  try {
    const url = `${TMDB_BASE_URL}/${type}/${id}/videos`;
    const res = await axios.get(url, {
      params: { api_key: TMDB_API_KEY, language: LANGUAGE }
    });
    // –ò—â–µ–º –ø–µ—Ä–≤—ã–π —Ç—Ä–µ–π–ª–µ—Ä –Ω–∞ YouTube
    const videos = res.data.results;
    const trailer = videos.find(v => v.site === 'YouTube' && v.type === 'Trailer');
    return trailer ? `https://www.youtube.com/watch?v=${trailer.key}` : null;
  } catch {
    return null;
  }
}

async function fetchDetails(type, id) {
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏–ª—å–º–µ/—Å–µ—Ä–∏–∞–ª–µ
  try {
    const url = `${TMDB_BASE_URL}/${type}/${id}`;
    const res = await axios.get(url, {
      params: { api_key: TMDB_API_KEY, language: LANGUAGE }
    });
    return res.data;
  } catch {
    return null;
  }
}

function formatGenres(genres) {
  if (!genres || genres.length === 0) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  return genres.map(g => g.name).join(', ');
}

async function preparePost(type, movie) {
  const details = await fetchDetails(type, movie.id);
  if (!details) return null;

  if (publishedIds.has(details.id)) return null; // –£–∂–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏

  const seoText = generateSeoText(details);
  const genres = formatGenres(details.genres);
  const year = details.release_date ? details.release_date.slice(0, 4) : (details.first_air_date ? details.first_air_date.slice(0, 4) : '‚Äî');
  const trailerUrl = await fetchVideos(type, details.id);

  const posterUrl = details.poster_path ? `${TMDB_IMAGE_BASE}${details.poster_path}` : null;
  const tmdbUrl = type === 'movie' ? `https://www.themoviedb.org/movie/${details.id}` :
                  type === 'tv' ? `https://www.themoviedb.org/tv/${details.id}` : '';

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
  let message = `üé¨ <b>${details.title || details.name} (${year})</b>\n`;
  message += `üìÖ –ñ–∞–Ω—Ä—ã: ${genres}\n\n`;
  message += `${seoText}\n\n`;
  if (trailerUrl) message += `üé• <a href="${trailerUrl}">–°–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–π–ª–µ—Ä</a>\n\n`;
  if (posterUrl) message += `<a href="${posterUrl}">&#8205;</a>\n`; // –î–ª—è –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏

  message += `üì∫ –ë–æ–ª—å—à–µ –Ω–æ–≤–∏–Ω–æ–∫ –Ω–∞ YouTube:\nüëâ https://www.youtube.com/@KinoBuzz/videos\n\n`;
  message += `<a href="${tmdbUrl}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ TMDb</a>`;

  publishedIds.add(details.id);

  return { message, posterUrl };
}

async function publishPosts() {
  console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é...');

  const types = ['movie', 'tv']; // —Ñ–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã
  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º—É–ª—å—Ç—Ñ–∏–ª—å–º—ã –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–∏–ø –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∂–∞–Ω—Ä–∞–º

  let posts = [];

  for (const type of types) {
    const movies = await fetchMovies(type);
    for (const movie of movies) {
      if (posts.length >= PUBLISH_COUNT) break;
      const post = await preparePost(type, movie);
      if (post) posts.push(post);
    }
    if (posts.length >= PUBLISH_COUNT) break;
  }

  for (const post of posts) {
    try {
      if (post.posterUrl) {
        await bot.sendPhoto(CHANNEL_USERNAME, post.posterUrl, { caption: post.message, parse_mode: 'HTML', disable_web_page_preview: false });
      } else {
        await bot.sendMessage(CHANNEL_USERNAME, post.message, { parse_mode: 'HTML', disable_web_page_preview: false });
      }
      console.log('–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:', post.message.split('\n')[0]);
      await new Promise(r => setTimeout(r, 2000)); // —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', e.message);
    }
  }

  console.log('–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
}

function schedulePosts() {
  for (const hour of PUBLISH_HOURS) {
    schedule.scheduleJob({ hour, minute: 0, tz: 'Europe/Kiev' }, () => {
      publishPosts();
    });
  }
  console.log('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', PUBLISH_HOURS);
}

schedulePosts();